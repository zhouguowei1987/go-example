package main

import (
	"errors"
	"fmt"
	"golang.org/x/net/html"
	"io"
	"math/rand"
	"net"
	"net/http"
	"net/url"
	"os"
	_ "os"
	"path/filepath"
	_ "path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/antchfx/htmlquery"
	_ "golang.org/x/net/html"
)

var HnBzwEnableHttpProxy = false
var HnBzwHttpProxyUrl = "111.225.152.186:8089"
var HnBzwHttpProxyUrlArr = make([]string, 0)

func HnBzwHttpProxy() error {
	pageMax := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	for _, page := range pageMax {
		freeProxyUrl := "https://www.beesproxy.com/free"
		if page > 1 {
			freeProxyUrl = fmt.Sprintf("https://www.beesproxy.com/free/page/%d", page)
		}
		beesProxyDoc, err := htmlquery.LoadURL(freeProxyUrl)
		if err != nil {
			return err
		}
		trNodes := htmlquery.Find(beesProxyDoc, `//figure[@class="wp-block-table"]/table[@class="table table-bordered bg--secondary"]/tbody/tr`)
		if len(trNodes) > 0 {
			for _, trNode := range trNodes {
				ipNode := htmlquery.FindOne(trNode, "./td[1]")
				if ipNode == nil {
					continue
				}
				ip := htmlquery.InnerText(ipNode)

				portNode := htmlquery.FindOne(trNode, "./td[2]")
				if portNode == nil {
					continue
				}
				port := htmlquery.InnerText(portNode)

				protocolNode := htmlquery.FindOne(trNode, "./td[5]")
				if protocolNode == nil {
					continue
				}
				protocol := htmlquery.InnerText(protocolNode)

				switch protocol {
				case "HTTP":
					HnBzwHttpProxyUrlArr = append(HnBzwHttpProxyUrlArr, "http://"+ip+":"+port)
				case "HTTPS":
					HnBzwHttpProxyUrlArr = append(HnBzwHttpProxyUrlArr, "https://"+ip+":"+port)
				}
			}
		}
	}
	return nil
}

func HnBzwSetHttpProxy() (httpclient *http.Client) {
	if HnBzwHttpProxyUrl == "" {
		if len(HnBzwHttpProxyUrlArr) <= 0 {
			err := HnBzwHttpProxy()
			if err != nil {
				HnBzwSetHttpProxy()
			}
		}
		HnBzwHttpProxyUrl = HnBzwHttpProxyUrlArr[0]
		if len(HnBzwHttpProxyUrlArr) >= 2 {
			HnBzwHttpProxyUrlArr = HnBzwHttpProxyUrlArr[1:]
		} else {
			HnBzwHttpProxyUrlArr = make([]string, 0)
		}
	}

	fmt.Println(HnBzwHttpProxyUrl)
	ProxyURL, _ := url.Parse(HnBzwHttpProxyUrl)
	httpclient = &http.Client{
		Transport: &http.Transport{
			Proxy: http.ProxyURL(ProxyURL),
			Dial: func(netw, addr string) (net.Conn, error) {
				c, err := net.DialTimeout(netw, addr, time.Second*3)
				if err != nil {
					fmt.Println("dail timeout", err)
					return nil, err
				}
				return c, nil

			},
			MaxIdleConnsPerHost:   10,
			ResponseHeaderTimeout: time.Second * 3,
		},
	}
	return httpclient
}

type QueryHnBzwListFormData struct {
	VIEWSTATE          string
	VIEWSTATEGENERATOR string
	EVENTTARGET        string
	EVENTARGUMENT      int
	EVENTVALIDATION    string
	txtKey             string
	txtNo              string
	drpState           int
	drpType            string
	txtIcs             string
	txtCnClass         string
	drpYear            int
	txtDrafter         string
	txtDrafterMan      string
}

var HnBzwCookie = "ASP.NET_SessionId=s3ubburyp1cfifdu2sixxmnu"
var HnBzwPdfCookie = "ASP.NET_SessionId=04gnax45h42x5uzmleajxgzf"

// 下载湖南省标准信息公共服务平台文档
// @Title 下载湖南省标准信息公共服务平台文档
// @Description https://www.hnbzw.com/，下载湖南省标准信息公共服务平台文档
func main() {
	pageListUrl := "https://www.hnbzw.com/Standard/StdSearch.aspx"
	fmt.Println(pageListUrl)
	startPage := 1
	isPageListGo := true
	for isPageListGo {
		queryHnBzwListFormData := QueryHnBzwListFormData{
			VIEWSTATE:          "",
			VIEWSTATEGENERATOR: "DB29C1C7",
			EVENTTARGET:        "AspNetPager1",
			EVENTARGUMENT:      startPage,
			EVENTVALIDATION:    "",
			txtKey:             "",
			txtNo:              "",
			drpState:           1,
			drpType:            "all",
			txtIcs:             "",
			txtCnClass:         "",
			drpYear:            0,
			txtDrafter:         "",
			txtDrafterMan:      "",
		}
		queryHnBzwListDoc, err := QueryHnBzwList(pageListUrl, queryHnBzwListFormData)
		if err != nil {
			fmt.Println(err)
			break
		}
		ulNodes := htmlquery.Find(queryHnBzwListDoc, `//form[@id="form1"]/div[@class="gj-cx-b"]/div[@class="con-gj"]/div[@class="gj-cx"]/div[@class="gj-zd"]/div[@class="gj-zd"]/div[@class="gjlb"]/ul[@class="list-mc"]`)
		if len(ulNodes) > 0 {
			for _, ulNode := range ulNodes {
				fmt.Println("=====================开始处理数据 page = ", startPage, "=========================")

				codeNode := htmlquery.FindOne(ulNode, `./li[2]/span[1]`)
				code := htmlquery.InnerText(codeNode)
				code = strings.ReplaceAll(code, "/", "-")
				code = strings.ReplaceAll(code, "—", "-")
				fmt.Println(code)

				titleNode := htmlquery.FindOne(ulNode, `./li[3]`)
				title := htmlquery.InnerText(titleNode)
				title = strings.TrimSpace(title)
				title = strings.ReplaceAll(title, " ", "-")
				title = strings.ReplaceAll(title, "　", "-")
				title = strings.ReplaceAll(title, "中文名：", "")
				title = strings.ReplaceAll(title, ":", "-")
				title = strings.ReplaceAll(title, "/", "-")
				title = strings.ReplaceAll(title, "--", "-")
				fmt.Println(title)

				filePath := "../www.hnbzw.com/" + title + "(" + code + ")" + ".pdf"
				fmt.Println(filePath)

				_, err = os.Stat(filePath)
				if err == nil {
					fmt.Println("文档已下载过，跳过")
					continue
				}

				// 查看是否有下载按钮
				buttonNode := htmlquery.FindOne(ulNode, `./li[1]/span[@class="lisy-xq"]/a[1]`)
				hrefText := htmlquery.SelectAttr(buttonNode, "href")
				previewHref := "https://www.hnbzw.com" + hrefText
				fmt.Println(previewHref)

				previewDoc, err := previewHnBzwDoc(previewHref)
				if err != nil {
					fmt.Println("获取文档详情失败，跳过")
					continue
				}
				// /html/body/form/div[4]/div/div/div/ul/table/tbody/tr[2]/td/input
				downloadButtonNode := htmlquery.FindOne(previewDoc, `//form[@id="form1"]/div[@class="gj-cx-b"]/div[@class="con-gj"]/div[@class="gj-cx-goods"]/div[@class="gj-zd"]/ul[@class="gj-bts"]/table/tbody/tr[2]/td/input`)
				if downloadButtonNode == nil {
					fmt.Println("没有下载按钮，跳过")
					continue
				}
				fmt.Println("=======开始下载========")

				// /html/body/form/input
				downloadNode := htmlquery.FindOne(previewDoc, `//html/body/form/input/@value`)
				if downloadNode == nil {
					fmt.Println("获取下载链接失败，跳过")
					continue
				}
				downloadUrl := htmlquery.InnerText(downloadNode)
				fmt.Println(downloadUrl)

				fmt.Println("=======开始下载" + title + "========")

				err = downloadHnBzw(downloadUrl, filePath)
				if err != nil {
					fmt.Println(err)
					continue
				}
				//复制文件
				tempFilePath := strings.ReplaceAll(filePath, "../www.hnbzw.com", "../temp-www.hnbzw.com")
				err = copyHnBzwFile(filePath, tempFilePath)
				if err != nil {
					fmt.Println(err)
					continue
				}
				fmt.Println("=======下载完成========")
				//DownLoadHnBzwTimeSleep := 10
				DownLoadHnBzwTimeSleep := rand.Intn(5)
				for i := 1; i <= DownLoadHnBzwTimeSleep; i++ {
					time.Sleep(time.Second)
					fmt.Println("startPage="+strconv.Itoa(startPage)+",filePath="+filePath+"===========下载成功 暂停", DownLoadHnBzwTimeSleep, "秒 倒计时", i, "秒===========")
				}
			}
			DownLoadHnBzwPageTimeSleep := 10
			// DownLoadHnBzwPageTimeSleep := rand.Intn(5)
			for i := 1; i <= DownLoadHnBzwPageTimeSleep; i++ {
				time.Sleep(time.Second)
				fmt.Println("startPage="+strconv.Itoa(startPage)+"=========== 暂停", DownLoadHnBzwPageTimeSleep, "秒 倒计时", i, "秒===========")
			}
			startPage++
		} else {
			isPageListGo = false
			startPage = 1
			break
		}
	}
}

func QueryHnBzwList(requestUrl string, queryHnBzwListFormData QueryHnBzwListFormData) (doc *html.Node, err error) {
	// 初始化客户端
	var client *http.Client = &http.Client{
		Transport: &http.Transport{
			Dial: func(netw, addr string) (net.Conn, error) {
				c, err := net.DialTimeout(netw, addr, time.Second*3)
				if err != nil {
					fmt.Println("dail timeout", err)
					return nil, err
				}
				return c, nil

			},
			MaxIdleConnsPerHost:   10,
			ResponseHeaderTimeout: time.Second * 30,
		},
	}
	if HnBzwEnableHttpProxy {
		client = HnBzwSetHttpProxy()
	}
	postData := url.Values{}
	postData.Add("__VIEWSTATE", queryHnBzwListFormData.VIEWSTATE)
	postData.Add("__VIEWSTATEGENERATOR", queryHnBzwListFormData.VIEWSTATEGENERATOR)
	postData.Add("__EVENTTARGET", queryHnBzwListFormData.EVENTTARGET)
	postData.Add("__EVENTARGUMENT", strconv.Itoa(queryHnBzwListFormData.EVENTARGUMENT))
	postData.Add("__EVENTVALIDATION", queryHnBzwListFormData.EVENTVALIDATION)
	postData.Add("txtKey", queryHnBzwListFormData.txtKey)
	postData.Add("txtNo", queryHnBzwListFormData.txtNo)
	postData.Add("drpState", strconv.Itoa(queryHnBzwListFormData.drpState))
	postData.Add("drpType", queryHnBzwListFormData.drpType)
	postData.Add("txtIcs", queryHnBzwListFormData.txtIcs)
	postData.Add("txtCnClass", queryHnBzwListFormData.txtCnClass)
	postData.Add("drpYear", strconv.Itoa(queryHnBzwListFormData.drpYear))
	postData.Add("txtDrafter", queryHnBzwListFormData.txtDrafter)
	postData.Add("txtDrafterMan", queryHnBzwListFormData.txtDrafterMan)

	req, err := http.NewRequest("POST", requestUrl, strings.NewReader(postData.Encode())) //建立连接

	if err != nil {
		return doc, err
	}

	req.Header.Set("Accept", "*/*")
	req.Header.Set("Accept-Language", "zh-CN,zh;q=0.9")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("Cookie", HnBzwCookie)
	req.Header.Set("Host", "www.hnbzw.com")
	req.Header.Set("Origin", "https://www.hnbzw.com")
	req.Header.Set("Referer", "https://www.hnbzw.com/Standard/StdSearch.aspx")
	req.Header.Set("Sec-Ch-Ua", "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\"")
	req.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	req.Header.Set("Sec-Ch-Ua-Platform", "\"macOS\"")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36")
	req.Header.Set("X-Requested-With", "XMLHttpRequest")
	resp, err := client.Do(req) //拿到返回的内容
	if err != nil {
		return doc, err
	}
	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			fmt.Println(err)
		}
	}(resp.Body)
	// 如果访问失败，就打印当前状态码
	if resp.StatusCode != http.StatusOK {
		return doc, errors.New("http status :" + strconv.Itoa(resp.StatusCode))
	}
	doc, err = htmlquery.Parse(resp.Body)
	if err != nil {
		return doc, err
	}
	return doc, nil
}

func previewHnBzwDoc(requestUrl string) (doc *html.Node, err error) {
	// 初始化客户端
	var client *http.Client = &http.Client{
		Transport: &http.Transport{
			Dial: func(netw, addr string) (net.Conn, error) {
				c, err := net.DialTimeout(netw, addr, time.Second*3)
				if err != nil {
					fmt.Println("dail timeout", err)
					return nil, err
				}
				return c, nil

			},
			MaxIdleConnsPerHost:   10,
			ResponseHeaderTimeout: time.Second * 30,
		},
	}
	if HnBzwEnableHttpProxy {
		client = HnBzwSetHttpProxy()
	}
	req, err := http.NewRequest("GET", requestUrl, nil) //建立连接

	if err != nil {
		return doc, err
	}

	req.Header.Set("Accept", "*/*")
	req.Header.Set("Accept-Language", "zh-CN,zh;q=0.9")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("Cookie", HnBzwCookie)
	req.Header.Set("Host", "www.hnbzw.com")
	req.Header.Set("Origin", "https://www.hnbzw.com")
	req.Header.Set("Referer", "https://www.hnbzw.com/Standard/StdSearch.aspx")
	req.Header.Set("Sec-Ch-Ua", "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\"")
	req.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	req.Header.Set("Sec-Ch-Ua-Platform", "\"macOS\"")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36")
	req.Header.Set("X-Requested-With", "XMLHttpRequest")
	resp, err := client.Do(req) //拿到返回的内容
	if err != nil {
		return doc, err
	}
	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			fmt.Println(err)
		}
	}(resp.Body)
	// 如果访问失败，就打印当前状态码
	if resp.StatusCode != http.StatusOK {
		return doc, errors.New("http status :" + strconv.Itoa(resp.StatusCode))
	}
	doc, err = htmlquery.Parse(resp.Body)
	if err != nil {
		return doc, err
	}
	return doc, nil
}

func downloadHnBzw(attachmentUrl string, filePath string) error {
	// 初始化客户端
	var client *http.Client = &http.Client{
		Transport: &http.Transport{
			Dial: func(netw, addr string) (net.Conn, error) {
				c, err := net.DialTimeout(netw, addr, time.Second*3)
				if err != nil {
					fmt.Println("dail timeout", err)
					return nil, err
				}
				return c, nil

			},
			MaxIdleConnsPerHost:   10,
			ResponseHeaderTimeout: time.Second * 30,
		},
	}
	if HnBzwEnableHttpProxy {
		client = HnBzwSetHttpProxy()
	}
	req, err := http.NewRequest("GET", attachmentUrl, nil) //建立连接
	if err != nil {
		return err
	}
	req.Header.Set("Accept", "*/*")
	//req.Header.Set("Accept-Encoding", "gzip, deflate, br, zstd")
	req.Header.Set("Accept-Language", "zh-CN,zh;q=0.9")
	req.Header.Set("Cache-Control", "max-age=0")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Cookie", HnBzwPdfCookie)
	req.Header.Set("Host", "pdf.hnbzw.com")
	req.Header.Set("Referer", "https://www.hnbzw.com/")
	req.Header.Set("Sec-Ch-Ua", "\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\"")
	req.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	req.Header.Set("Sec-Ch-Ua-Platform", "\"macOS\"")
	req.Header.Set("Sec-Fetch-Dest", "document")
	req.Header.Set("Sec-Fetch-Mode", "navigate")
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36")
	resp, err := client.Do(req) //拿到返回的内容
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	// 如果访问失败 就打印当前状态码
	if resp.StatusCode != http.StatusOK {
		return errors.New("http status :" + strconv.Itoa(resp.StatusCode))
	}

	// 创建一个文件用于保存
	fileDiv := filepath.Dir(filePath)
	if _, err = os.Stat(fileDiv); err != nil {
		if os.MkdirAll(fileDiv, 0o777) != nil {
			return err
		}
	}
	out, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer out.Close()

	// 然后将响应流和文件流对接起来
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}
	return nil
}

func copyHnBzwFile(src, dst string) (err error) {
	in, err := os.Open(src)
	if err != nil {
		return err
	}
	defer func(in *os.File) {
		err := in.Close()
		if err != nil {
			return
		}
	}(in)

	out, err := os.Create(dst)
	if err != nil {
		return err
	}
	defer func(out *os.File) {
		err := out.Close()
		if err != nil {
			return
		}
	}(out)

	_, err = io.Copy(out, in)
	return nil
}
